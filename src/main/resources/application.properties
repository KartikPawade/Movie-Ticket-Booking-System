#JWT details
app.jwtSecret = ===========movie=ticket=booking=system====================
app.jwtExpirationMs = 8400000

#DB config
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.driver-class-name=org.postgresql.Driver

spring.datasource.url=jdbc:postgresql://${DB_HOST}:5432/${POSTGRES_DB}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
# to initialize the table first and then the data.sql script
spring.jpa.defer-datasource-initialization=true
# script based initialization for sql
spring.sql.init.mode=always
#supress errors from sql script
spring.sql.init.continue-on-error = true

## log level debug
logging.level.org.springframework.web: DEBUG

#Stripe API details
api.stripe.key = sk_test_51OiLjcSDUHnXmUlJXh3bL4M8QDOPfWS4Mdr4U81b3xFQ2lTmG14W7R6iiw6ItmMV3iXgJUmReRttQNtMhTPFICrp00JNMoZCja


#SPRING CACHE CONFIG : REDIS
spring.cache.type: redis
spring.cache.redis.time-to-live: 3600000


#REDIS details
redis.key.expiryTimeInMinutes = 6

#RabbitMQ config - Optional
#spring.amqp.deserialization.trust.all=true
spring.rabbitmq.host: ${RABBIT_MQ_HOST}
spring.rabbitmq.port: 5672
spring.rabbitmq.username: ${RABBIT_MQ_USERNAME}
spring.rabbitmq.password: ${RABBIT_MQ_PASSWORD}

#rabbitMQ email-service properties
rabbitmq.email.queue = email_queue
rabbitmq.email.exchange.name = email_exchange
rabbitmq.email.binding.key = ticket.confirm.email
rabbitmq.email.routing.key = ticket.confirm.email

#rabbitMQ payment-fail-service properties
rabbitmq.payment.details.unsaved.queue = unsaved_payment_details_queue
rabbitmq.payment.details.unsaved.exchange.name = unsaved_payment_details_exchange
rabbitmq.payment.details.unsaved.binding.key = payment_details.unsaved
rabbitmq.payment.details.unsaved.routing.key = payment_details.unsaved

#Email Service details
mail.username=pwdkartik@gmail.com
mail.password=tlpz alut weae bqqd